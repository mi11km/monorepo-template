// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v2.1.1 with parameter "target=ts"
// @generated from file google/longrunning/operations.proto (package google.longrunning, syntax proto3)
/* eslint-disable */

import { Operations } from "./operations_pb";

/**
 * Lists operations that match the specified filter in the request. If the
 * server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 * @generated from rpc google.longrunning.Operations.ListOperations
 */
export const listOperations = Operations.method.listOperations;

/**
 * Gets the latest state of a long-running operation.  Clients can use this
 * method to poll the operation result at intervals as recommended by the API
 * service.
 *
 * @generated from rpc google.longrunning.Operations.GetOperation
 */
export const getOperation = Operations.method.getOperation;

/**
 * Deletes a long-running operation. This method indicates that the client is
 * no longer interested in the operation result. It does not cancel the
 * operation. If the server doesn't support this method, it returns
 * `google.rpc.Code.UNIMPLEMENTED`.
 *
 * @generated from rpc google.longrunning.Operations.DeleteOperation
 */
export const deleteOperation = Operations.method.deleteOperation;

/**
 * Starts asynchronous cancellation on a long-running operation.  The server
 * makes a best effort to cancel the operation, but success is not
 * guaranteed.  If the server doesn't support this method, it returns
 * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
 * [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
 * other methods to check whether the cancellation succeeded or whether the
 * operation completed despite cancellation. On successful cancellation,
 * the operation is not deleted; instead, it becomes an operation with
 * an [Operation.error][google.longrunning.Operation.error] value with a
 * [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
 * `Code.CANCELLED`.
 *
 * @generated from rpc google.longrunning.Operations.CancelOperation
 */
export const cancelOperation = Operations.method.cancelOperation;

/**
 * Waits until the specified long-running operation is done or reaches at most
 * a specified timeout, returning the latest state.  If the operation is
 * already done, the latest state is immediately returned.  If the timeout
 * specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
 * timeout is used.  If the server does not support this method, it returns
 * `google.rpc.Code.UNIMPLEMENTED`.
 * Note that this method is on a best-effort basis.  It may return the latest
 * state before the specified timeout (including immediately), meaning even an
 * immediate response is no guarantee that the operation is done.
 *
 * @generated from rpc google.longrunning.Operations.WaitOperation
 */
export const waitOperation = Operations.method.waitOperation;
